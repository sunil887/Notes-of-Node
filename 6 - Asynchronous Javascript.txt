chapter -1 : Aysnchronous does not mean multithreading . It means non blocking.

chapter -2 : when the data calls are made it takes time so it kind a block.
				
				var user = data_call();
				we have to wailt till the call ends or if it's done asynchronously then 
				data will not be in user variable when we call it.

				To deal with Asynchronous code like data_call or any other asynchronous code.
				1) callbacks
				2)promises
				3)asyc/await

chapter -3 : callbacks
				callbacks are just function which are passes to the asynchronous function 
				are called when asynchronous function ready with thier result.
				
				example:
					CALLING : getRepository('mosh',(repos)=>{
									console.log('respsitory are ',repos);
								})
		FUNCTION Definition : function getRepository(username,callback){
								setTimeout(() => {
									callback(['repo1','repo1','repo1']);    
								}, 2000);

chapter -4 callback hell
				callbacks can happens one after another 
				and result highly nested structure , called - CALLBACK HELL OR CHRISTMAS TREE PROBLEM.

chapter-5 named_function   we can avoid the use of anonymous function in call backs which results into
				 call back instead use named functon and provide function definition   
				down the call.

chapter - 6 Promises		Promises : hold the eventual result of an asynchronous operation
						promises that it will give an object. this object can be in three states
						1> when we create promise object it is in pending states -- call asynchronous operation
						when the resaults are ready promises can be 
						2>fulfilled or resolved state 
						if something went wrong then promises in 
						3> Rejected state  
						
						Code Example
						---------------------------------------------------------------------------
						var p = new Promise((resolve,reject)=>{
    
								setTimeout(()=>{            //Async call can be to database or to any another async operation
									resolve(1);             // reolve is used to returned  the result from async call
									reject(new Error('message')); // reject is used return error 
								},2000);

							});

							p
								.then((result)=>{console.log(result)})      // then handle the situation 
																			//when promise oject is in fullfilled state o resolve state
								
							  .catch( (err)=>console.log('err:',err.message) )  // catch is to handle when 
																				//promise object is in rejected state i,e 
							------------------------------------------------------------------------------
chapter - 8 : to consume promise we can make promise then chain.

		like 
		getuser(1)
                    .then( result =>{console.log('hello');
			getRepository(result.username)})
                    .then( repos =>console.log('repos are :',repos))
                    .catch(err=> console.log(err));
     
chapter - 9 : promises that has been already resolved or rejected are used for unit testing.

chapter - 10 : promises.All(Afunc1,Afunc2......) can run more than one asynchronous together in parrallel.
		promises.race(Afunc1,Afunc2......)  resolve when any of the asynchronous function  resolves
		