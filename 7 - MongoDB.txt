chapter - 1 : mongo Db is NoSql db where there is no schema is used and simply
		 object in JSON format are saved.

chapter -2 :	Install mongoDB without as a service then run the software
		Add mongod binary exe location  to path variable
		
		then give command mongod to start server and then run compass and connect it. 

chapter -3 :	In chapter-7 of section 5 there is configuration file that has the reposibility  to provide connection string to mongoDB 
		which is based on environmnet we are working on.

		in order to connect to mongodb

		use const mongoose = require('mongoose');
		mongoose.connect('mongodb://localhost/playground') // when we write first data  to this database mongoDB automatically create this db.
		.then(result => console.log('connected..'))		 						    // connect return promise
		.catch(err => coonsole.log('not connected'))
		  
	
		make sure you start your local server before you run it.

chapter -4:  like in Relational Database       mongodb
			table ---------------> collection
			rows  ---------------> documents

		we can create schema in mongoose which is specific to mongoose that how documents should look like
		and the type that we  can define in schema are 
		 String,Number,Date,Buffer,Boolean,ObjectID,Arrayconst
			
		const MongooseSchema = {
    					    name : String,
					    author: String,
					    tags:[String],
					    date: {type:Date,default:Date.now},
					    isPublished:Boolean
					}					

		 courseSchema = mongoose.Schema(MongooseSchema);

chapter -5 : 
		//returns a class
		const Course  = mongoose.model('Course',courseSchema); // singular name of collection,Document schema both in DB // compiling it to mode which gives a classl
		
		//make an object
		const course = new Course({
    		name:'Angular',
    		author:'mosh',
    		tags:['angular','frontend'],
    		isPublished: true
    
		})
    		course.save()s
                	.then(result=>console.log(result));

chapter-8 : querying function in mongo DB 
			use querying function on the class(model) created
			
			Example : 
			async function getCourses(){
			courses = await Course
								.find({isPublished:true})
								.limit(4)
								.sort({name:1}) //-1 for descending 
								.select({name:1,tags:1});
			console.log(courses);
			}
			getCourses();
			
chapter-9 : comparison operators use in mongo db 
			
			each property of model is compared from an object 
			syntax .find(property_name: {$comparison_operator: value })
			
			Comparision operators are as follows 
			//eq - equals to 
			//ne - not equals to 
			//gt - greater than
			//gte - greater than or equals to
			//lt  - less than 
			//lte - less than or equals to
			//in  - 
			// nin - not in 
			
				example: price :{$in: [10,15,20]};

chapter-10	: logical operators

				use .or() and .and() methods
				for example
				course
					.find()
					.or({author:'mosh'},{isPublished:true}) // when any of conditon true it return course
					
					
chapter-11 :  Regular expression in javascript

				examples
					.find({author:regular_expression});
					
				regular_expression = /pattern/   standard
				
				author : /^mosh/		author name should start with mosh  
				author : /Hamedani$/i	author name should ends with mosh  
				author : /.*Mosh.*/		.* means anyhing before mosh after mosh	
										by default all these cases are canse sensitive 
										'i' stands for insensitive.
				
chapter -12 use .count() count the number of documents based on the conditon given in .find() 

chapter -13 when we need to data at particular page then we use .skip() called pagination
			.skip((pageNumber-1)*pageSize)
			.limit(pageSize)
			
			pageNumber and pagesize is provided in query string.
			
chapter -14 we can import data in .json format to mongo db run following command.

			command is :
			mongoimport  		   		// to import
			--db mongo-exercises   		// specifying db name useing --db flag
			--collection courses    	// specifying collection to courses
			--file exercise-data.json	// json file
			--json 						//format of data in json file


chapter 17 for update quey in mongo db ---------------------- query first 

		async function updateCouse(id){
    const course = await Course.findById(id);
    if(!course)
        return;

    course.isPublished = true;
    course.author = 'another author';

    const result = await course.save();
    console.log(result);
}

updateCouse('5c746cec790c090a10158891');

chapter - 18		async function updateCouseUpdateFirst(id){
 			   const result = await Course.update({_id:id},{   // second arguement is update object
        			$set: {
            			author:'mosh after changed',
            			isPublished:true
        			}
    				})
     				console.log(result);
				} 

			there are lots of update object available.

			you get only resolve result in this function
			
			what if you want to update the document and get it.
		use findIdAndUpdate(id,{update object}); 